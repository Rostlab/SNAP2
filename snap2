#!/usr/bin/perl -w
use strict;
use feature qw(say);
use Getopt::Long;
use Cwd 'abs_path';
use File::Temp qw||;
use File::chdir;
use File::Basename;
use File::Path qw(make_path);
use Carp qw(cluck :DEFAULT);

our ($allmuts,$config,$sequence,@mutants,$name,@sequence_array,$swissdb,$db_swiss,$swiss_dat,$big80,$phat_matrix);
my ($version,$snap2dir,$fannlib,$cpu);
BEGIN {
    use Config::IniFiles;
    our $VERSION = "__VERSION__";
    $version=$VERSION;

    my ( $defaultconfig, $etcconfig );
    if( -e "__pkgdatadir__/snap2rc.default" ) { $defaultconfig = Config::IniFiles->new( -file => "__pkgdatadir__/snap2rc.default" ); }
    if( -e "__sysconfdir__/snap2rc" ) { $etcconfig = Config::IniFiles->new( -file => "__sysconfdir__/snap2rc", -import => $defaultconfig ); } else { $etcconfig = $defaultconfig; }
    if( ( $ENV{SNAP2CONF} && -e "$ENV{SNAP2CONF}" ) || -e "$ENV{HOME}/.snap2rc" ) { $config = Config::IniFiles->new( -file => $ENV{SNAP2CONF} || "$ENV{HOME}/.snap2rc", -import => $etcconfig ); } else { $config = $etcconfig; }

    #$config=Config::IniFiles->new( -file => "/mnt/project/resnap/build/trunk/snap2rc.default");
    $snap2dir = $config->val('snap2', 'snap2dir');
    $swissdb=$config->val('blast','swiss');
    $swiss_dat=$config->val('data','swiss_dat');
    $db_swiss=$config->val('data','db_swiss');
    $big80=$config->val('blast','big80');
    $phat_matrix=$config->val('data','phat_matrix');
    #$fannlib=$config->val('snap2','fann_lib');
    $cpu=$config->val('snap2', 'blastpgp_processors');
}

use lib glob( "$snap2dir/lib" );
use Run;
use Extract;
use Predict;
use Prediction;

my($in,$out,$mut,$workdir,$plot,$labeled_muts_file,$only_extract,@labels,$pc,$quiet,$fcs,$print_version,$help);
my $debug=0;
$cpu=1;
my $args_ok=GetOptions( 'in=s'    =>  \$in,
                        'out=s'    =>  \$out,
                        'workdir=s'    =>  \$workdir,
                        'debug+'     => \$debug,
                        'muts=s'    =>  \$mut,
                        'label=s'   => \$labeled_muts_file,
                        'extract'   =>\$only_extract,
                        'print-collections' => \$pc,
                        'quiet' => \$quiet,
                        'force-cache-store' => \$fcs,
                        'cpus=i' => \$cpu,
                        'plot'  => \$plot,
                        'version' => \$print_version,
                        'help' => \$help
);
(say $version and exit(0)) if $print_version;
die_usage("Please read the man page for more detailed information") if $help;
sub die_usage{
    my $msg=shift;
    say "\nDESCRIPTION:\nPredict functional effect of non-synonymous single nucleotide polymorphisms";
    say "\nUSAGE:\nsnap2 -i <input fasta> -o <output file> -m <mutations file> [OPTIONS]";
    say "\nMANDATORY:";
    say "-i, --in <file>\n\tInput sequence in fasta format";
    say "\n-m, --mut <file>\n\tMutation file in format: [A-Z][0-9]+[A-Z] e.g: 'A32S'. One per line";
    say "\n-o, --out <file>\n\tOutput file";
    say "\nOPTIONS:";
    say "-w, --workdir <directory>\n\tWorking directory. Intermediate files will be saved here";
    say "\n-l, --labels <file>\n\tMutation file with labels in format: [A-Z][0-9]+[A-Z]".'\s'."[0|1] e.g: 'A32S 1' (where 1 = non-neutral, 0 = neutral). One per line";
    say "\n-e, --extract\n\tOnly extract feature values. Will be saved to <out file>.features";
    say "\n-p, --print-collections\n\tAlso print the raw outputs for each network";
    say "\n-q, --quiet\n\tSilence announcements";
    say "\n-d, --debug\n\tPrint debugging messages. Use twice to increase level of debugging messages";
    say "\n-c, --cpus\n\tNumber of cpu cores";
    die "\n$msg\n";
}
die_usage("No input file defined") unless $in;
die_usage("No output file defined") unless $out;
die_usage("Unknown argument") unless $args_ok;

if ($workdir){
    $workdir=Cwd::realpath( $workdir );
}
else {
    $workdir=File::Temp::tempdir( CLEANUP=> !$debug);
}

warn "Working directory: $workdir\n" unless $quiet;

$in=Cwd::realpath($in);
$out=Cwd::realpath($out);
$name=fileparse($out,qr/\.[^.]*/);

warn "Job name: $name\n" unless $quiet;

#Read sequence file
open (FHIN,$in) || confess "\nError: unable to open sequence file: $in\n" ;
while (<FHIN>){
    next if /^>/o;
    chomp($_);
    $sequence.=$_;
}
$sequence=~s/\s//g;
close FHIN;

#sequence as array
@sequence_array=split(//o,$sequence);

#Read mutants file
if ($labeled_muts_file){
    $labeled_muts_file=Cwd::realpath($labeled_muts_file);
    #Get the corresponding class label if available
    open (LABEL,$labeled_muts_file)|| confess "\nError: unable to open labeled mutation file: $labeled_muts_file\n";
    while (<LABEL>){
        confess "\nError: Invalid mutation line: $_\n" if !/^[A-Z]\d+[A-Z]\s+\d$/o;
        my ($mut,$label)=split;
        push (@mutants,$mut);
        push (@labels,$label);
    }
    close LABEL;

    #write mutant file in correct format (will be passed on to reprof and sift)
    $mut="$workdir/$name.muts";
    open MUT,">$mut" || confess "\nError: unable to write $mut\n";
    print MUT join "\n",@mutants;
    close MUT;
}
elsif ($mut){
    if ($mut eq 'all'){
        @mutants=allmuts(\$mut,$workdir,\@sequence_array,$debug); 
        $allmuts=1;
        $mut="$workdir/$name.allmuts";
    }
    else{
        $mut=Cwd::realpath($mut);
        open (FHIN,$mut) || confess "\nError: unable to open mutations file: $mut\n";
        while(<FHIN>){
            #check every mutant
            confess "\nError: Invalid mutation line: $_\n" unless /^[ARNDCQEGHILKMFPSTWYV]\d+[ARNDCQEGHILKMFPSTWYV]$/o;
            chomp $_;
            push (@mutants,$_);
        }
        close FHIN;
    }
}
else {
    die_usage("No mutation file defined");
}

#Run all external programs
warn "\nRunning external programs..\n" unless $quiet;
Run::all($mut,$workdir,$fcs,$cpu,$allmuts,$debug);

#Extract feature values
warn "\nExtracting feature values..\n" unless $quiet;
my $data=Extract::all($workdir,$debug>1 ? 1 : 0);

#write out the featurefile (for training purpose, won't be used anymore afterwards)
confess "Number of labels is not consistent with number of data points" if ($labeled_muts_file && scalar(@labels) != scalar(@$data));
my $extract="$workdir/$name.features";
open FEATURES,">$extract" || confess "\nError: unable to write $extract\n";
foreach my $i (0..@{$data}-1) {
    say FEATURES join(" ",@{@$data[$i]});
    say FEATURES ($labels[$i]==1 ? "0 1" : "1 0") if ($labeled_muts_file);
}
close FEATURES;

exit(0) if $only_extract;

#Run all the neural networks
warn "\nRunning predictions..\n" unless $quiet;
my @predictions=Predict::all($data,"$snap2dir/models",$debug>1 ? 1 : 0);
confess "Number of predictions is not consistent with number of data points" if scalar(@predictions) != scalar(@$data);

#Expected accuracy as obtained from 10-fold cross-validation
my %expected_accuracy=( -9 => '97%',
                        -8 => '93%',
                        -7 => '87%',
                        -6 => '82%',
                        -5 => '78%',
                        -4 => '72%',
                        -3 => '66%',
                        -2 => '61%',
                        -1 => '57%',
                         0 => '53%',
                         1 => '59%',
                         2 => '63%',
                         3 => '66%',
                         4 => '71%',
                         5 => '75%',
                         6 => '80%',
                         7 => '85%',
                         8 => '91%',
                         9 => '95%');

#Write output file
my $prediction=new Prediction();
open OUT,">$out" or confess "Unable to write output file: $out";
foreach my $data_point (0..@predictions-1) {
    my ($neu,$non)=qw(0 0);
    print OUT $mutants[$data_point] . " => " if $pc;
    foreach my $network (@{$predictions[$data_point]}) {
        $neu+=$$network[0];
        $non+=$$network[1];
        print OUT int(100*$$network[0]) ." ". int(100*$$network[1]) ."\t| " if $pc;
    }
    say OUT "Sum = ". int(100*($non-$neu)/scalar(@{$predictions[0]})) if $pc;
    if ($labeled_muts_file){
        $prediction->add([$neu/10,$non/10],($labels[$data_point] == 1 ? [0,1] : [1,0]));
    }
    my $ri=$non-$neu;
    say OUT $mutants[$data_point] . " => Prediction: " . ($ri>0 ? "Non-neutral" : "Neutral") . "\tReliability Index: " . int(abs($ri)) . "\tExpected accuracy: " . $expected_accuracy{int($ri)}; 
    
}
close OUT;
$prediction->write("$out.labeledpred") if $labeled_muts_file;
#Inbuild plotting function - Mhecht: currently disabled
#if ($plot){
#    use lib glob ("$snap2dir/plots");
#    use Plot;
#    Plot::from_prediction($name,\@sequence_array,\@predictions,$out,$debug);
#}
warn "\nOutput written to $out\n" unless $quiet;
exit(0);

#--------------------------------------------------
# Sub-routines 
#-------------------------------------------------- 

sub allmuts{
    my ($mut,$workdir,$seq_arr,$debug)=@_;
    my @mutants;
    my @amino_acids=qw( A R N D C Q E G H I L K M F P S T W Y V );
    for (my $i = 0; $i < scalar(@$seq_arr); $i++) {
        my $wt=($$seq_arr[$i]!~/[ARNDCQEGHILKMFPSTWYV]/o ? "A" : $$seq_arr[$i]);
        foreach my $aa (@amino_acids) {
            push @mutants,$wt . ($i+1) . $aa unless $wt eq $aa;
        }
    }
    open MUT,">$workdir/$name.allmuts" or confess "Unable to write mutant file: $workdir/$name.allmuts";
    say MUT join "\n",@mutants;
    close MUT;

    return @mutants;
}
__END__

=pod

=head1 NAME

snap2 - a method for evaluating effects of single amino acid substitutions on protein function

=head1 SYNOPSIS

snap2 [OPTION]

=head1 DESCRIPTION

SNAP is a method for evaluating effects of single amino acid substitutions on protein function.

Single Nucleotide Polymorphisms (SNPs) represent a very large portion of all genetic variations. SNPs found in the coding regions of genes are often non-synonymous, changing a single amino acid in the encoded protein sequence. SNPs are either "neutral" in the sense that the resulting point-mutated protein is not functionally discernible from the wild-type, or they are "non-neutral" in that the mutant and wild-type differ in function. The ability to identify non-neutral substitutions in an ocean of SNPs could significantly aid targeting disease causing detrimental mutations, as well as SNPs that increase the fitness of particular phenotypes.

SNAP is a neural-network based method that uses in silico derived protein information (e.g. secondary structure, conservation, solvent accessibility, etc.) in order to make predictions regarding functionality of mutated proteins. The network takes protein sequences and lists of mutants as input, returning a score for each substitution. These scores can then be translated into binary predictions of effect (present/absent) and reliability indices (RI). SNAP returns its results to the user via e-mail. 

=head2 Output format

Self-annotating, see example outputs in F<__pkgdatadir__/example>.  No output for mutations below minimum reliability or expected accuracy but see B<--print-collection>.

Value ranges in output:

 <mutation> [Non-neutral|Neutral] [0-9] [0-100%]

=head1 REFERENCES

=over

=item Bromberg, Y., Yachdav, G., and Rost, B. (2008). SNAP predicts effect of mutations on protein function. Bioinformatics, 24(20), 2397-8.

=back

=head1 OPTIONS

=over

=item -i

Input file in fasta format with C<.fasta> extension.

=item -m

Mutant file in <from><AAnumber><to> format:

 C30Y
 R31W
 G48D

OR: Keyword 'all' will mutate every position into each of the 19 non-native amino acids. I.e.: a full mutagenesis analysis

=item -o

Output file path

=item -cpus

Number of processors (cores) to use. Default: I<1>.

=item --debug

=item --nodebug

Debugging messages, use twice to increase verbosity. default: B<--nodebug>

=item --force-cache-store

Force snap2 to reproduce all files and store them in the cache. This is only sensible if the cache data is out of date.

=item --help

Display a short usage overview

=item --quiet

=item --noquiet

silence progress messages, default: B<--noquiet>

=item --version

print the program version

=item --workdir

Working directory.  Use this option to force program reuse intermediate processing results.  Default: a new temporary directory that is removed automatically.

=back

=head2 Expert options

=over

=item --print-collection

=item --noprint-collection

Print outputs of each of the snap2 predictions against the 10 models - these are neural network outputs, [<int> <int> |]+ - into the final output file. Default: B<--noprint-collection>.

 <mutation> => [<int> <int> |]+ sum = [-100-100]

=back

=head1 EXAMPLES

C<snap2 -i __pkgdatadir__/example/MT4_HUMAN.fasta -m __pkgdatadir__/example/MT4_HUMAN.muts -o MT4_HUMAN.snap2>

C<snap2 -i __pkgdatadir__/example/MT4_HUMAN.fasta -m all -o MT4_HUMAN.snap2>

=head1 ENVIRONMENT

=over

=item SNAP2CONF

Location of snap2rc configuration file to use, overriding other configuration files

=back

=head1 FILES

=over

=item F<__pkgdatadir__/snap2rc.default>

Default configuration file. See this file for a description of the parameters.

=item F</etc/snap2rc>

System configuration file overriding values in F<__pkgdatadir__/snap2rc.default>

=item F<~/.snap2rc>

User configuration file overriding values in F</etc/snap2rc>

=item F<$SNAP2CONF>

If this environment variable is set F<~/.snap2rc> is disregarded and the value of the variable is read for configuration options overriding F</etc/snap2rc>

=back

=head1 AUTHOR

Maximilian Hecht <hecht@rostlab.org>

=head1 COPYRIGHT AND LICENSE

(C) Copyright 2012, Maximilian Hecht

NON COMMERCIAL SOFTWARE LICENSE AGREEMENT

1. GENERAL.

THE TERMS OF THIS LICENSE APPLY TO NON-PROFIT ORGANZIATIONS AND USERS WHO ARE EMPLOYEES OF NON-PROFIT ORGANIZAIONS. FOR PROFIT ORGANIZATION AND INDIVIDIAL USERS SHOULD CONTACT L<info@bio-sof.com> TO OBTAIN A COMMERCIAL LICENSE

2. OWNERSHIP OF LICENSED PRODUCT.

(a) Licensee acknowledges and agrees that the ``Licensed Product'' and all copies thereof are Licensor's exclusive property.  Licensee has no rights with respect to the Licensed Product except as set forth in this Agreement, and, without limiting the generality of the foregoing, may not distribute, resell, sublicense, assign or transfer the ``Licensed Product'' or any portion thereof, or modify, decompile, disassemble or otherwise change the Licensed Software without Licensor's prior written consent.

(b) Upon any termination, cancellation, or expiration hereof, Licensee shall immediately delete the Licensed Software from all of its computer systems and destroy any copies of the Licensed Documentation in its possession.

3. GRANT OF LICENSE.

a. Licensor hereby grants to Licensee, and Licensee hereby accepts, a personal, Non-exclusive and non-transferable license to Use the Licensed Software at the Licensed Site during the term hereof, and to use the Licensed Documentation during such term in support of the Use of the Licensed Software. Additionally individuals who are employees or contractors of Licensee who log into computers at the Licensed Site from their personal home or while traveling, are entitled to Use the Licensed Software at such remote locations, provided that such Use is undertaken for and on behalf of the Licensee and that such employees or contractors report directly to employees of the Licensee whose usual and regular place of work is the Licensed Site.

b. Other than as set forth in paragraph 3(a) above, a separate license shall be required, together with the payment of additional annual license fees and charges, to use the Licensed Software at any location other than the Licensed Site. 

4. REPRODUCTION OF LICENSED PRODUCT. 

Licensee may reproduce the Software for Use in accordance with the terms of the limited License granted to the Licensee in Section 2.   Reproduction of the Licensed Software for any other reason is strictly prohibited.  All copies of the Software, in whole or in part, shall contain the Licensor's restrictive and proprietary notices as they appear on the copies of Software provided by Licensor. 

5. LIMITATION OF LIABILITY.

a. IN NO EVENT SHALL LICENSOR BE LIABLE TO LICENSEE FOR ANY INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES OR LOST PROFITS, ARISING OUT OF OR RELATED TO THIS LICENSE AGREEMENT OR THE PERFORMANCE OR BREACH THEREOF, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY THEREOF. 

b. IN NO EVENT SHALL LICENSOR BE LIABLE TO LICENSEE FOR ANY DAMAGES RESULTING FROM OR RELATED TO ANY FAILURE OF THE SOFTWARE PRODUCTS, INCLUDING, BUT NOT LIMITED TO LOSS OF DATA, OR DELAY OF THE LICENSOR IN THE DELIVERY OF THE LICENSED PRODUCT OR IN THE PERFORMANCE OF SERVICES UNDER THIS LICENSE AGREEMENT.

c. IN NO EVENT SHALL LICENSEE BE LIABLE TO LICENSOR FOR ANY LOST PROFITS, LOST OPPORTUNITY COSTS OR ANY SPECIAL, INDIRECT, CONSEQUENTIAL OR INCIDENTAL DAMAGES, HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY. 

=cut

# vim:ai:ts=4:et:
