.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Graph::colour 3pm"
.TH Graph::colour 3pm "2003-02-11" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GD::Graph::colour \- Colour manipulation routines for use with GD::Graph
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use GD::Graph::colour qw(:colours :lists :files :convert);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBGD::Graph::colour\fR package provides a few routines to work with
colours. The functionality of this package is mainly defined by what is
needed, now and historically, by the GD::Graph modules.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "colour_list( \fInumber of colours\fP )"
.IX Subsection "colour_list( number of colours )"
Returns a list of \fInumber of colours\fR colour names known to the package.
Exported with the :lists tag.
.SS "sorted_colour_list( \fInumber of colours\fP )"
.IX Subsection "sorted_colour_list( number of colours )"
Returns a list of \fInumber of colours\fR colour names known to the package, 
sorted by luminance or hue.
\&\fB\s-1NB\s0.\fR Right now it always sorts by luminance. Will add an option in a later
stage to decide sorting method at run time.
Exported with the :lists tag.
.SS "_rgb( \fIcolour name\fP )"
.IX Subsection "_rgb( colour name )"
Returns a list of the \s-1RGB\s0 values of \fIcolour name\fR. if the colour name
is a string of the form that is acceptable to the hex2rgb sub, then the
colour will be added to the list dynamically.
Exported with the :colours tag.
.SS "_hue( \fIR,G,B\fP )"
.IX Subsection "_hue( R,G,B )"
Returns the hue of the colour with the specified \s-1RGB\s0 values.
Exported with the :colours tag.
.SS "_luminance( \fIR,G,B\fP )"
.IX Subsection "_luminance( R,G,B )"
Returns the luminance of the colour with the specified \s-1RGB\s0 values.
Exported with the :colours tag.
.ie n .SS "add_colour(colourname => [$r, $g, $b]) or add_colour('#7fe310')"
.el .SS "add_colour(colourname => [$r, \f(CW$g\fP, \f(CW$b\fP]) or add_colour('#7fe310')"
.IX Subsection "add_colour(colourname => [$r, $g, $b]) or add_colour('#7fe310')"
Self-explanatory.
Exported with the :colours tag.
.ie n .SS "rgb2hex($red, $green, $blue)"
.el .SS "rgb2hex($red, \f(CW$green\fP, \f(CW$blue\fP)"
.IX Subsection "rgb2hex($red, $green, $blue)"
.SS "hex2rgb('#7fe310')"
.IX Subsection "hex2rgb('#7fe310')"
These functions translate a list of \s-1RGB\s0 values into a hexadecimal
string, as is commonly used in \s-1HTML\s0 and the Image::Magick \s-1API\s0, and vice
versa.
Exported with the :convert tag.
.SS "read_rgb( \fIfile name\fP )"
.IX Subsection "read_rgb( file name )"
Reads in colours from a rgb file as used by the X11 system.
.PP
Doing something like:
.PP
.Vb 2
\&    use GD::Graph::bars;
\&    use GD::Graph::colour;
\&
\&    GD::Graph::colour::read_rgb("rgb.txt") or die "cannot read colours";
.Ve
.PP
Will allow you to use any colours defined in rgb.txt in your graph.
Exported with the :files tag.
.SH "PREDEFINED COLOUR NAMES"
.IX Header "PREDEFINED COLOUR NAMES"
white,
lgray,
gray,
dgray,
black,
lblue,
blue,
dblue,
gold,
lyellow,
yellow,
dyellow,
lgreen,
green,
dgreen,
lred,
red,
dred,
lpurple,
purple,
dpurple,
lorange,
orange,
pink,
dpink,
marine,
cyan,
lbrown,
dbrown.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martien Verbruggen <mgjv@tradingpost.com.au>
.SS "Copyright"
.IX Subsection "Copyright"
GIFgraph: Copyright (c) 1995\-1999 Martien Verbruggen.
Chart::PNGgraph: Copyright (c) 1999 Steve Bonds.
GD::Graph: Copyright (c) 1999 Martien Verbruggen.
.PP
All rights reserved. This package is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
GD::Graph, 
GD::Graph::FAQ
